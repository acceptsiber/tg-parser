from copy import deepcopy
import json
import os
import re

from images import image_to_base64


async def remove_emojis(text):
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö emoji
    emoji_pattern = re.compile(
        "["
        "\U0001f600-\U0001f64f"  # emoticons
        "\U0001f300-\U0001f5ff"  # symbols & pictographs
        "\U0001f680-\U0001f6ff"  # transport & map symbols
        "\U0001f1e0-\U0001f1ff"  # flags (iOS)
        "\U00002702-\U000027b0"
        "\U000024c2-\U0001f251"
        "]+",
        flags=re.UNICODE,
    )
    return emoji_pattern.sub(r"", text)


async def parse_message(tg_data):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = tg_data["message"]["message"]
    telegram_id = tg_data["message"]["telegram_id"]
    photos_id = tg_data.get("photos_id", [])

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    price_match = re.search(r"üí∞–¶–µ–Ω–∞: ([0-9, ]+)\$", message)
    area_match = re.search(r"üî∂–æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å: (\d+)", message)
    address_match = re.search(r"üåç–ê–¥—Ä–µ—Å: (.+?) üî∂", message) or re.search(
        r"üåç–ê–¥—Ä–µ—Å: (.+?)üí∞", message
    )
    rooms_match = re.search(r"üî∂–∫–æ–º–Ω–∞—Ç: (\d+)", message)
    land_match = re.search(r"üî∂—Å–æ—Ç–æ–∫: ([0-9,]+)", message)
    floors_match = re.search(r"üî∂—ç—Ç–∞–∂: (\d+)", message)
    state_match = re.search(r"üî∂–°–æ—Å—Ç–æ—è–Ω–∏–µ: (.+?) üí∞", message)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (–î–æ–º/–ö–æ—Ç—Ç–µ–¥–∂)
    object_type = "–î–æ–º"
    if "–ö–æ—Ç—Ç–µ–¥–∂" in message:
        object_type = "–ö–æ—Ç—Ç–µ–¥–∂"

    # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –ø–æ –≤–∞—à–µ–º—É —à–∞–±–ª–æ–Ω—É
    result = {
        "type": "1",
        "user": "608",
        "object_type": "5",
        "object_fields": [
            {
                "id": "896",
                "title": "–¶–µ–Ω–∞",
                "field_type": "number",
                "data": {
                    "value": (
                        price_match.group(1).replace(" ", "").replace(",", "")
                        if price_match
                        else "0"
                    )
                },
                "options": [],
                "required": True,
            },
            {
                "id": "951",
                "title": "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å",
                "field_type": "number",
                "data": {"value": area_match.group(1) if area_match else "0"},
                "options": [],
                "required": False,
            },
            {
                "id": "869",
                "title": "–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞",
                "field_type": "address",
                "data": {
                    "value": (
                        f"–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω, –¢–∞—à–∫–µ–Ω—Ç, {address_match.group(1)}"
                        if address_match
                        else ""
                    )
                },
                "options": [],
                "required": False,
            },
            {
                "id": "871",
                "title": "–û–ø–∏—Å–∞–Ω–∏–µ",
                "field_type": "rich_text",
                "data": {"value": await remove_emojis(message)},
                "options": [],
                "required": False,
            },
            {
                "id": "883",
                "title": "–¢–∏–ø —Å–¥–µ–ª–∫–∏",
                "field_type": "object_type",
                "data": {"value": "1"},
                "options": [],
                "required": True,
            },
            {
                "id": "981",
                "title": "–£–¥–æ–±—Å—Ç–≤–∞",
                "field_type": "list",
                "data": {"value": object_type},
                "options": [],
                "required": False,
            },
            {
                "id": "1135",
                "title": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
                "field_type": "number",
                "data": {"value": rooms_match.group(1) if rooms_match else "0"},
                "options": [],
                "required": False,
            },
            {
                "id": "882",
                "title": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                "field_type": "photo",
                "data": {
                    "value": [
                        {
                            str(i): (
                                f"data:image/png;base64,{base64_string}"
                                if (
                                    base64_string := await image_to_base64(
                                        os.path.join("photos", f"{photo_id}.jpg")
                                    )
                                )
                                else None
                            )
                        }
                        for i, photo_id in enumerate(photos_id)
                    ]
                },
                "options": [],
                "required": False,
            },
        ],
    }

    return result
